import time
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from google.oauth2 import service_account
from googleapiclient.discovery import build

# Define the URL and initialize the WebDriver instance
url = "https://dashboard.traqo.in/"
service = Service(executable_path='chromedriver.exe')

# Create a new instance of the Chrome driver
driver = webdriver.Chrome(service=service)

# Navigate to the URL
driver.get(url)

# Input username and password, then login
input_element = driver.find_element(By.CLASS_NAME, 'form-control')
input_element.send_keys('8860100881' + Keys.ENTER)

input_element = driver.find_element(By.ID, 'password')
input_element.send_keys('8860100881@123' + Keys.ENTER)

# Click on the dashboard icon
icon_element = driver.find_element(By.CLASS_NAME, 'now-ui-icons.shopping_delivery-fast')
icon_element.click()

# Wait for the map link to be clickable and click it
link_locator = (By.XPATH, "//a[@class='navbar-brand' and @href='/map/']")
WebDriverWait(driver, 10).until(EC.element_to_be_clickable(link_locator))

link_element = driver.find_element(*link_locator)
link_element.click()

time.sleep(20)  # Wait for the table to load (adjust as necessary)

# Get page source after waiting
page_source = driver.page_source

# Use BeautifulSoup to parse the page source
soup = BeautifulSoup(page_source, 'html.parser')

# Find the table by its ID or class (adjust this based on your actual HTML structure)
table = soup.find('table', {'id': 'mTable'})

# Extract table headers
headers = [header.text.strip() for header in table.find('thead').find_all('td')]

# Extract table rows
rows = []
for row in table.find('tbody', {'id': 'show_table'}).find_all('tr'):
    cells = [cell.text.strip() for cell in row.find_all('td')]
    rows.append(cells)

# Close the WebDriver
driver.quit()

# Authenticate with Google Sheets API using service account credentials
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'credentials.json'  # Replace with the path to your service account JSON file

creds = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# The ID and range of the spreadsheet to update
SPREADSHEET_ID = '1EzbitCVQF6uCwkamegOMgrbFs0OBdPEJCEmuskpoIpQ'
RANGE_NAME = 'Sheet1'  # Modify if you're using a different sheet name or range

# Build the service to interact with Google Sheets
service = build('sheets', 'v4', credentials=creds)

# Prepare data to append
values = [headers] + rows

# Append data to Google Sheet
body = {
    'values': values
}

result = service.spreadsheets().values().append(
    spreadsheetId=SPREADSHEET_ID,
    range=RANGE_NAME,
    valueInputOption='USER_ENTERED',
    body=body
).execute()

print('{0} cells appended.'.format(result.get('updates').get('updatedCells')))
